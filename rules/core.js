/* eslint-disable max-lines */

const OFF = 0;
const WARNING = 1;
const ERROR = 2;

const MODULE_BLACKLIST = ['jquery'];

module.exports = {
  'accessor-pairs': WARNING,
  'array-bracket-spacing': [ERROR, 'never'],
  'array-callback-return': ERROR,
  'arrow-body-style': [ERROR, 'as-needed'],
  'arrow-parens': OFF, // I prefer leaving the parens off when I can
  'arrow-spacing': ERROR,
  'block-scoped-var': ERROR,
  'block-spacing': [ERROR, 'always'],
  'brace-style': [ERROR, '1tbs', {allowSingleLine: true}],
  'callback-return': ERROR,
  'comma-dangle': [ERROR, 'always-multiline'],
  'comma-spacing': [ERROR, {before: false, after: true}],
  'comma-style': [ERROR, 'last'],
  'computed-property-spacing': [ERROR, 'never'],
  'consistent-return': WARNING,
  'consistent-this': [ERROR, 'self'],
  'constructor-super': ERROR,
  'default-case': [WARNING, {commentPattern: '^no default$'}],
  'dot-location': [ERROR, 'property'],
  'dot-notation': [ERROR, {allowKeywords: true}],
  'eol-last': ERROR,
  'func-names': WARNING,
  'func-style': WARNING,
  'generator-star-spacing': [ERROR, {before: false, after: true}],
  'global-require': ERROR,
  'guard-for-in': ERROR,
  'handle-callback-err': ERROR,
  'id-blacklist': [ERROR, 'data'],
  'id-length': [WARNING, {min: 1, max: 50}],
  'id-match': OFF, // off because I dont have any use for it
  'init-declarations': ERROR,
  'jsx-quotes': [WARNING, 'prefer-double'],
  'key-spacing': [ERROR, {beforeColon: false, afterColon: true}],
  'keyword-spacing': ERROR,
  'linebreak-style': [ERROR, 'unix'],
  'lines-around-comment': OFF, // off because: why would anyone want that?
  'max-depth': [WARNING, 4],
  'max-len': [WARNING, {code: 100, tabWidth: ERROR, ignoreTrailingComments: true}],
  'max-lines': [WARNING, {max: 200, skipBlankLines: false, skipComments: false}],
  'max-nested-callbacks': [WARNING, 2],
  'max-params': [WARNING, 3],
  'max-statements-per-line': [ERROR, {max: 1}],
  'max-statements': [WARNING, 10],
  'multiline-ternary': OFF, // off because some should be multiline, others single
  'new-cap': [ERROR, {newIsCap: true}],
  'new-parens': ERROR,
  'newline-after-var': OFF, // dont want to enforce one way or the other
  'newline-before-return': OFF, // dont want to enforce one way or the other
  'newline-per-chained-call': [ERROR, {ignoreChainWithDepth: 4}],
  'no-alert': WARNING,
  'no-array-constructor': ERROR,
  'no-bitwise': ERROR,
  'no-caller': ERROR,
  'no-case-declarations': ERROR,
  'no-catch-shadow': ERROR,
  'no-class-assign': ERROR,
  'no-cond-assign': [ERROR, 'always'],
  'no-confusing-arrow': [ERROR, {allowParens: true}],
  'no-console': WARNING,
  'no-const-assign': ERROR,
  'no-constant-condition': WARNING,
  'no-continue': ERROR,
  'no-control-regex': ERROR,
  'no-debugger': ERROR,
  'no-delete-var': ERROR,
  'no-div-regex': ERROR,
  'no-dupe-args': ERROR,
  'no-dupe-class-members': ERROR,
  'no-dupe-keys': ERROR,
  'no-duplicate-case': ERROR,
  'no-duplicate-imports': ERROR,
  'no-else-return': ERROR,
  'no-empty-character-class': ERROR,
  'no-empty-function': ERROR,
  'no-empty-pattern': ERROR,
  'no-empty': ERROR,
  'no-eq-null': ERROR,
  'no-eval': ERROR,
  'no-ex-assign': ERROR,
  'no-extend-native': ERROR,
  'no-extra-bind': ERROR,
  'no-extra-boolean-cast': ERROR,
  'no-extra-label': ERROR,
  'no-extra-parens': [WARNING, 'all'],
  'no-extra-semi': ERROR,
  'no-fallthrough': ERROR,
  'no-floating-decimal': ERROR,
  'no-func-assign': ERROR,
  'no-implicit-coercion': [ERROR, {boolean: false}],
  'no-implicit-globals': ERROR,
  'no-implied-eval': ERROR,
  'no-inline-comments': OFF, // inline comments are not inherently bad
  'no-inner-declarations': ERROR,
  'no-invalid-regexp': ERROR,
  'no-invalid-this': ERROR,
  'no-irregular-whitespace': ERROR,
  'no-iterator': ERROR,
  'no-label-var': ERROR,
  'no-labels': [ERROR, {allowLoop: false, allowSwitch: false}],
  'no-lone-blocks': ERROR,
  'no-lonely-if': ERROR,
  'no-loop-func': ERROR,
  'no-magic-numbers': OFF, // magic numbers are not necessarily bad. we use them in THIS FILE!
  'no-mixed-operators': ERROR,
  'no-mixed-requires': ERROR,
  'no-mixed-spaces-and-tabs': WARNING,
  'no-multi-spaces': WARNING,
  'no-multi-str': ERROR,
  'no-multiple-empty-lines': [ERROR, {max: ERROR, maxEOF: 1}],
  'no-native-reassign': ERROR,
  'no-negated-condition': WARNING,
  'no-negated-in-lhs': ERROR,
  'no-nested-ternary': ERROR,
  'no-new-func': ERROR,
  'no-new-object': ERROR,
  'no-new-require': ERROR,
  'no-new-symbol': ERROR,
  'no-new-wrappers': ERROR,
  'no-new': ERROR,
  'no-obj-calls': ERROR,
  'no-octal-escape': ERROR,
  'no-octal': ERROR,
  'no-param-reassign': [ERROR, {props: true}],
  'no-path-concat': ERROR,
  'no-plusplus': OFF, // ++ is not bad.
  'no-process-env': OFF, // off because process.env helps optimize builds
  'no-process-exit': ERROR,
  'no-proto': ERROR,
  'no-prototype-builtins': ERROR,
  'no-redeclare': ERROR,
  'no-regex-spaces': ERROR,
  'no-restricted-globals': [ERROR, '$', '_'],
  'no-restricted-imports': [WARNING].concat(MODULE_BLACKLIST),
  'no-restricted-modules': [ERROR].concat(MODULE_BLACKLIST),
  'no-restricted-syntax': OFF, // other rules take care of these
  'no-return-assign': ERROR,
  'no-script-url': ERROR,
  'no-self-assign': ERROR,
  'no-self-compare': ERROR,
  'no-sequences': ERROR,
  'no-shadow-restricted-names': ERROR,
  'no-shadow': ERROR,
  'no-spaced-func': ERROR,
  'no-sparse-arrays': ERROR,
  'no-sync': WARNING,
  'no-tabs': WARNING,
  'no-ternary': OFF, // ternary statements are not bad.
  'no-this-before-super': ERROR,
  'no-throw-literal': ERROR,
  'no-trailing-spaces': WARNING,
  'no-undef-init': OFF, // clashes with init-declarations
  'no-undef': ERROR,
  'no-undefined': ERROR,
  'no-underscore-dangle': OFF, // dangling underscores convey useful information
  'no-unexpected-multiline': WARNING,
  'no-unmodified-loop-condition': ERROR,
  'no-unneeded-ternary': [WARNING, {defaultAssignment: false}],
  'no-unreachable': ERROR,
  'no-unsafe-finally': ERROR,
  'no-unused-expressions': ERROR,
  'no-unused-labels': ERROR,
  'no-unused-vars': ERROR,
  'no-use-before-define': [ERROR, 'nofunc'],
  'no-useless-call': WARNING,
  'no-useless-computed-key': ERROR,
  'no-useless-concat': ERROR,
  'no-useless-constructor': ERROR,
  'no-useless-escape': ERROR,
  'no-useless-rename': ERROR,
  'no-var': ERROR,
  'no-void': ERROR,
  'no-warning-comments': [WARNING, {terms: ['todo'], location: 'start'}],
  'no-whitespace-before-property': ERROR,
  'no-with': ERROR,
  'object-curly-newline': [WARNING, {multiline: true}],
  'object-curly-spacing': [WARNING, 'never'],
  'object-property-newline': [ERROR, {allowMultiplePropertiesPerLine: true}],
  'object-shorthand': ERROR,
  'one-var-declaration-per-line': [ERROR, 'always'],
  'one-var': [ERROR, 'never'],
  'operator-assignment': [ERROR, 'always'],
  'operator-linebreak': OFF, // this rule would enforce ugly code
  'padded-blocks': [ERROR, 'never'],
  'prefer-arrow-callback': ERROR,
  'prefer-const': [ERROR, {ignoreReadBeforeAssign: true}],
  'prefer-reflect': WARNING,
  'prefer-rest-params': WARNING,
  'prefer-spread': WARNING,
  'prefer-template': WARNING,
  'quote-props': [ERROR, 'as-needed'],
  'require-jsdoc': OFF, // jsdoc is dumb. comments should say why, not what.
  'require-yield': ERROR,
  'rest-spread-spacing': [ERROR, 'never'],
  'semi-spacing': [ERROR, {before: false, after: true}],
  'sort-imports': [WARNING, {ignoreCase: true, memberSyntaxSortOrder: ['none', 'multiple', 'all', 'single']}], // eslint-disable-line max-len
  'sort-vars': WARNING,
  'space-before-blocks': ERROR,
  'space-before-function-paren': [WARNING, 'never'],
  'space-in-parens': [ERROR, 'never'],
  'space-infix-ops': ERROR,
  'space-unary-ops': ERROR,
  'spaced-comment': [ERROR, 'always'],
  'template-curly-spacing': ERROR,
  'unicode-bom': [ERROR, 'never'],
  'use-isnan': ERROR,
  'valid-jsdoc': OFF, // off because jsdoc is bad. comments say why, not what!
  'valid-typeof': ERROR,
  'vars-on-top': ERROR,
  'wrap-iife': [ERROR, 'outside'],
  'wrap-regex': OFF, // wrapping regexes in parens is unnecessary
  'yield-star-spacing': [ERROR, 'after'],
  camelcase: [ERROR, {properties: 'never'}],
  complexity: [WARNING, 11],
  curly: [WARNING, 'multi-line'],
  eqeqeq: [ERROR, 'allow-null'],
  indent: [ERROR, 2, {SwitchCase: 1}],
  quotes: [ERROR, 'single', {avoidEscape: true}],
  radix: ERROR,
  semi: [ERROR, 'always'],
  strict: [ERROR, 'never'],
  yoda: ERROR,
};
